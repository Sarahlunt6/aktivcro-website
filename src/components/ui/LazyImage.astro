---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  placeholder?: boolean;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  class: className = '', 
  loading = 'lazy',
  decoding = 'async',
  placeholder = true
} = Astro.props;

// Generate placeholder for better UX
const placeholderSrc = placeholder 
  ? `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='${width || 400}' height='${height || 300}'%3E%3Crect width='100%25' height='100%25' fill='%23f3f4f6'/%3E%3C/svg%3E`
  : undefined;
---

<img
  src={src}
  alt={alt}
  width={width}
  height={height}
  class={`transition-opacity duration-300 ${className}`}
  loading={loading}
  decoding={decoding}
  data-placeholder={placeholderSrc}
  onload="this.style.opacity='1'"
  onerror="this.src=this.dataset.placeholder || ''"
  style="opacity: 0;"
/>

<script>
  // Progressive image loading
  document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('img[data-placeholder]');
    
    images.forEach((img) => {
      // Show placeholder immediately
      if (img.dataset.placeholder) {
        img.src = img.dataset.placeholder;
        img.style.opacity = '0.5';
      }
      
      // Load actual image
      const actualImg = new Image();
      actualImg.onload = function() {
        img.src = actualImg.src;
        img.style.opacity = '1';
      };
      actualImg.src = img.getAttribute('data-src') || img.src;
    });
  });
</script>

<style>
  img {
    max-width: 100%;
    height: auto;
  }
</style>